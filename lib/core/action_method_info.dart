import 'package:flutter/widgets.dart';
import 'package:reflect_framework/core/item.dart';

import '../gui/action_method_processor_context.dart';
import 'reflect_documentation.dart';
import 'reflect_framework.dart';
import 'service_class_info.dart';

/// ## [ActionMethod]
///
/// [ActionMethod]s are methods in a [ServiceObject] or [DomainObject] that comply with a set of rules and are therefore recognized by the [ReflectFramework].
///
/// [ActionMethod]s are displayed as menu items in a [ReflectGuiApplication] or as commands in other types of [ReflectApplication]s.
///
/// A method needs to comply to the following rules to be considered a [ActionMethod] if:
/// - the method is in a [ServiceObject] or [DomainObject]
/// - and the method is public (method name does not start with an underscore)
/// - and there is a [ActionMethodPreProcessor] that can process the method parameter signature.
/// - and there is a [ActionMethodProcessor] that can process the method result.
///

abstract class ActionMethod extends ConceptDocumentation {}

/// TODO explain what it does
///
/// The implementations of this class are generated by the [ReflectCodeGenerator]
abstract class ActionMethodInfo implements DynamicItem {
  IconData get icon;

  /// Starts the ActionMethod process (e.g. when clicking on a menu button)
  void start(BuildContext context);

  /// This method should only be called by menu items (for [ReflectGuiApplication]s) or external commands (for other types of [ReflectApplication]s
  /// It:
  /// - tries to create the parameter value(s) with [ActionMethodParameterFactory]'s (if any)
  /// - and then calls a [ActionMethodPreProcessor]
  /// - and then calls the method (which might be delegated to a form ok or a dialog ok button)
  /// - it will handle any exceptions that could be thrown
  void processParameter(
      ActionMethodProcessorContext context, List methodParameterValues);

  /// This method should only be called by a [ActionMethodPreProcessor] (which might be delegated to a form ok or a dialog ok button)
  /// It:
  /// - invokes the method
  /// - and then calls the [ActionMethodProcessor] to process the results
  /// - it will handle any exceptions that could be thrown
  void processResult(
      ActionMethodProcessorContext context, List methodParameterValues);

}

/// [ServiceObjectActionMethod]s are displayed on the main menu of an [ReflectGuiApplication] or are commands that can be accessed from the outside world in other type of [ReflectApplications]
abstract class ServiceObjectActionMethodInfo extends ActionMethodInfo {
  ServiceClassInfo get serviceObjectInfo;
}

/// TODO explain what it does
class ActionMethodParameterFactory {}
